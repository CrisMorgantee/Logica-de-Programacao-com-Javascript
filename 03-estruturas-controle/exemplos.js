// =====================================================================================
// EXEMPLOS COMPLETOS DE ESTRUTURAS DE CONTROLE EM JAVASCRIPT
// =====================================================================================

console.log("üöÄ INICIANDO EXEMPLOS DE ESTRUTURAS DE CONTROLE");
console.log("=".repeat(60));

// =====================================================================================
// 1. ESTRUTURAS CONDICIONAIS B√ÅSICAS
// =====================================================================================

console.log("\nüìã 1. ESTRUTURAS CONDICIONAIS B√ÅSICAS");
console.log("-".repeat(40));

// IF simples
let idade = 18;
if (idade >= 18) {
    console.log("‚úÖ Maior de idade - pode votar");
}

// IF...ELSE
let temperatura = 22;
if (temperatura > 25) {
    console.log("üå°Ô∏è Est√° quente hoje");
} else {
    console.log("üå°Ô∏è Temperatura agrad√°vel");
}

// IF...ELSE IF...ELSE
let nota = 85;
let conceito;

if (nota >= 90) {
    conceito = "A - Excelente";
} else if (nota >= 80) {
    conceito = "B - Muito Bom";
} else if (nota >= 70) {
    conceito = "C - Bom";
} else if (nota >= 60) {
    conceito = "D - Regular";
} else {
    conceito = "F - Reprovado";
}

console.log(`Nota ${nota}: ${conceito}`);

// =====================================================================================
// 2. OPERADOR TERN√ÅRIO
// =====================================================================================

console.log("\nüìã 2. OPERADOR TERN√ÅRIO");
console.log("-".repeat(40));

// Tern√°rio simples
let saldo = 100;
let status = saldo >= 0 ? "Positivo" : "Negativo";
console.log(`Saldo: R$ ${saldo} - Status: ${status}`);

// Tern√°rio aninhado
let pontuacao = 750;
let categoria = pontuacao >= 850 ? "Premium" : 
                pontuacao >= 700 ? "Gold" : 
                pontuacao >= 500 ? "Silver" : "Bronze";
console.log(`Pontua√ß√£o: ${pontuacao} - Categoria: ${categoria}`);

// Tern√°rio com express√µes
let hora = 14;
let periodo = hora < 12 ? "Bom dia" : hora < 18 ? "Boa tarde" : "Boa noite";
console.log(`${hora}h - ${periodo}`);

// =====================================================================================
// 3. SWITCH...CASE
// =====================================================================================

console.log("\nüìã 3. SWITCH...CASE");
console.log("-".repeat(40));

// Switch b√°sico
let diaSemana = 3;
let nomeDia;

switch (diaSemana) {
    case 1:
        nomeDia = "Domingo";
        break;
    case 2:
        nomeDia = "Segunda-feira";
        break;
    case 3:
        nomeDia = "Ter√ßa-feira";
        break;
    case 4:
        nomeDia = "Quarta-feira";
        break;
    case 5:
        nomeDia = "Quinta-feira";
        break;
    case 6:
        nomeDia = "Sexta-feira";
        break;
    case 7:
        nomeDia = "S√°bado";
        break;
    default:
        nomeDia = "Dia inv√°lido";
}

console.log(`Dia ${diaSemana}: ${nomeDia}`);

// Switch com m√∫ltiplos casos
let mes = 12;
let estacao;

switch (mes) {
    case 12:
    case 1:
    case 2:
        estacao = "Ver√£o";
        break;
    case 3:
    case 4:
    case 5:
        estacao = "Outono";
        break;
    case 6:
    case 7:
    case 8:
        estacao = "Inverno";
        break;
    case 9:
    case 10:
    case 11:
        estacao = "Primavera";
        break;
    default:
        estacao = "M√™s inv√°lido";
}

console.log(`M√™s ${mes}: ${estacao}`);

// Switch com fall-through intencional
let operacao = "admin";
let permissoes = [];

switch (operacao) {
    case "admin":
        permissoes.push("deletar");
        // fall through
    case "editor":
        permissoes.push("editar");
        // fall through
    case "viewer":
        permissoes.push("visualizar");
        break;
    default:
        permissoes.push("sem permiss√£o");
}

console.log(`Opera√ß√£o ${operacao}: [${permissoes.join(", ")}]`);

// =====================================================================================
// 4. VALORES FALSY E TRUTHY
// =====================================================================================

console.log("\nüìã 4. VALORES FALSY E TRUTHY");
console.log("-".repeat(40));

// Testando valores falsy
let valoresFalsy = [false, 0, -0, 0n, "", null, undefined, NaN];
console.log("Valores Falsy:");
valoresFalsy.forEach(valor => {
    if (!valor) {
        console.log(`  ‚ùå ${JSON.stringify(valor)} √© falsy`);
    }
});

// Testando valores truthy
let valoresTruthy = [true, 1, -1, "0", "false", [], {}, function(){}];
console.log("\nValores Truthy:");
valoresTruthy.forEach(valor => {
    if (valor) {
        console.log(`  ‚úÖ ${JSON.stringify(valor)} √© truthy`);
    }
});

// Exemplos pr√°ticos com truthy/falsy
let nome = "";
if (nome) {
    console.log(`Bem-vindo, ${nome}!`);
} else {
    console.log("Por favor, informe seu nome");
}

let lista = [];
if (lista.length) {
    console.log(`Lista tem ${lista.length} itens`);
} else {
    console.log("Lista est√° vazia");
}

// =====================================================================================
// 5. OPERADORES L√ìGICOS
// =====================================================================================

console.log("\nüìã 5. OPERADORES L√ìGICOS");
console.log("-".repeat(40));

// AND (&&)
let usuario = { nome: "Jo√£o", ativo: true, admin: false };

if (usuario && usuario.ativo && usuario.nome) {
    console.log(`‚úÖ Usu√°rio ${usuario.nome} est√° ativo`);
}

// Short-circuit com &&
usuario && usuario.nome && console.log(`Ol√°, ${usuario.nome}!`);

// OR (||) para valores padr√£o
function saudar(nome) {
    nome = nome || "Visitante";
    console.log(`Ol√°, ${nome}!`);
}

saudar("Maria");
saudar("");
saudar();

// NOT (!)
let ativo = true;
console.log(`Usu√°rio ${!ativo ? "inativo" : "ativo"}`);

// Dupla nega√ß√£o para convers√£o boolean
console.log("Convers√µes para boolean:");
console.log(`!!"hello": ${!!"hello"}`);
console.log(`!!0: ${!!0}`);
console.log(`!!null: ${!!null}`);

// =====================================================================================
// 6. OPERADORES DE COALESC√äNCIA (ES2020+)
// =====================================================================================

console.log("\nüìã 6. OPERADORES DE COALESC√äNCIA");
console.log("-".repeat(40));

// Nullish Coalescing (??)
let config = {
    timeout: 0,
    retries: null,
    debug: false
};

// Diferen√ßa entre || e ??
console.log("Usando || (considera falsy):");
console.log(`timeout: ${config.timeout || 5000}`); // 5000 (0 √© falsy)
console.log(`retries: ${config.retries || 3}`);    // 3 (null √© falsy)
console.log(`debug: ${config.debug || true}`);     // true (false √© falsy)

console.log("\nUsando ?? (apenas null/undefined):");
console.log(`timeout: ${config.timeout ?? 5000}`); // 0 (0 n√£o √© null/undefined)
console.log(`retries: ${config.retries ?? 3}`);    // 3 (null √© null)
console.log(`debug: ${config.debug ?? true}`);     // false (false n√£o √© null/undefined)

// Optional Chaining (?.)
let pessoa = {
    nome: "Ana",
    endereco: {
        rua: "Rua A",
        numero: 123
    }
};

// Acesso seguro a propriedades aninhadas
console.log(`\nOptional Chaining:`);
console.log(`Rua: ${pessoa.endereco?.rua}`);           // "Rua A"
console.log(`CEP: ${pessoa.endereco?.cep ?? "N/A"}`);  // "N/A"
console.log(`Empresa: ${pessoa.empresa?.nome ?? "N√£o informado"}`); // "N√£o informado"

// =====================================================================================
// 7. ESTRUTURAS CONDICIONAIS COMPLEXAS
// =====================================================================================

console.log("\nüìã 7. ESTRUTURAS CONDICIONAIS COMPLEXAS");
console.log("-".repeat(40));

// Guard clauses (cl√°usulas de guarda)
function processarPedido(pedido) {
    if (!pedido) {
        return "‚ùå Pedido √© obrigat√≥rio";
    }

    if (!pedido.itens || pedido.itens.length === 0) {
        return "‚ùå Pedido deve ter pelo menos um item";
    }

    if (pedido.total <= 0) {
        return "‚ùå Total deve ser maior que zero";
    }

    return "‚úÖ Pedido processado com sucesso";
}

// Testando guard clauses
console.log(processarPedido(null));
console.log(processarPedido({ itens: [] }));
console.log(processarPedido({ itens: ["item1"], total: 100 }));

// Condi√ß√µes m√∫ltiplas organizadas
function verificarAcesso(usuario) {
    const temIdade = usuario.idade >= 18;
    const estaAtivo = usuario.ativo === true;
    const temPermissao = usuario.role === "admin" || usuario.role === "user";
    const naoEstaBloquado = !usuario.bloqueado;

    if (temIdade && estaAtivo && temPermissao && naoEstaBloquado) {
        return "‚úÖ Acesso liberado";
    }

    // Mensagens espec√≠ficas para cada problema
    if (!temIdade) return "‚ùå Usu√°rio menor de idade";
    if (!estaAtivo) return "‚ùå Conta inativa";
    if (!temPermissao) return "‚ùå Sem permiss√£o";
    if (usuario.bloqueado) return "‚ùå Usu√°rio bloqueado";

    return "‚ùå Acesso negado";
}

// Testando verifica√ß√£o de acesso
const usuario1 = { idade: 25, ativo: true, role: "user", bloqueado: false };
const usuario2 = { idade: 16, ativo: true, role: "user", bloqueado: false };
const usuario3 = { idade: 30, ativo: false, role: "admin", bloqueado: false };

console.log(`Usu√°rio 1: ${verificarAcesso(usuario1)}`);
console.log(`Usu√°rio 2: ${verificarAcesso(usuario2)}`);
console.log(`Usu√°rio 3: ${verificarAcesso(usuario3)}`);

// =====================================================================================
// 8. PADR√ïES AVAN√áADOS
// =====================================================================================

console.log("\nüìã 8. PADR√ïES AVAN√áADOS");
console.log("-".repeat(40));

// Evitando n√∫meros m√°gicos
const STATUS_PEDIDO = {
    PENDENTE: 1,
    PROCESSANDO: 2,
    ENVIADO: 3,
    ENTREGUE: 4,
    CANCELADO: 5
};

function obterStatusTexto(status) {
    switch (status) {
        case STATUS_PEDIDO.PENDENTE:
            return "‚è≥ Pendente";
        case STATUS_PEDIDO.PROCESSANDO:
            return "üîÑ Processando";
        case STATUS_PEDIDO.ENVIADO:
            return "üì¶ Enviado";
        case STATUS_PEDIDO.ENTREGUE:
            return "‚úÖ Entregue";
        case STATUS_PEDIDO.CANCELADO:
            return "‚ùå Cancelado";
        default:
            return "‚ùì Status desconhecido";
    }
}

console.log(obterStatusTexto(STATUS_PEDIDO.PROCESSANDO));

// Valida√ß√£o de entrada com m√∫ltiplas checagens
function validarEmail(email) {
    // Checagens sequenciais com early return
    if (typeof email !== 'string') {
        return { valido: false, erro: "Email deve ser uma string" };
    }

    if (email.trim() === '') {
        return { valido: false, erro: "Email n√£o pode estar vazio" };
    }

    if (!email.includes('@')) {
        return { valido: false, erro: "Email deve conter @" };
    }

    if (email.length < 5) {
        return { valido: false, erro: "Email muito curto" };
    }

    return { valido: true, erro: null };
}

// Testando valida√ß√£o
const emails = ["", "abc", "abc@", "test@email.com"];
emails.forEach(email => {
    const resultado = validarEmail(email);
    console.log(`Email "${email}": ${resultado.valido ? "‚úÖ V√°lido" : "‚ùå " + resultado.erro}`);
});

console.log("\n‚úÖ EXEMPLOS DE ESTRUTURAS DE CONTROLE CONCLU√çDOS!");
console.log("üéì Conceitos demonstrados:");
console.log("   ‚Ä¢ Condicionais (if, else, else if)");
console.log("   ‚Ä¢ Operador tern√°rio");
console.log("   ‚Ä¢ Switch...case");
console.log("   ‚Ä¢ Valores falsy e truthy");
console.log("   ‚Ä¢ Operadores l√≥gicos (&&, ||, !)");
console.log("   ‚Ä¢ Nullish coalescing (??)");
console.log("   ‚Ä¢ Optional chaining (?.)");
console.log("   ‚Ä¢ Guard clauses");
console.log("   ‚Ä¢ Valida√ß√£o de entrada");
console.log("   ‚Ä¢ Padr√µes avan√ßados");