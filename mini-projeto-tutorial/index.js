
// =====================================================================================
// PROJETO COMPLETO: SISTEMA DE E-COMMERCE EDUCACIONAL
// =====================================================================================
// 
// üìö OBJETIVO PEDAG√ìGICO:
// Este arquivo integra TODOS os conceitos fundamentais de JavaScript em um sistema
// funcional completo. Cada se√ß√£o demonstra conceitos espec√≠ficos de forma pr√°tica.
//
// üéØ CONCEITOS APLICADOS:
// ‚úÖ Vari√°veis (const, let) e tipos de dados
// ‚úÖ Objetos e m√©todos personalizados
// ‚úÖ Arrays e manipula√ß√£o de dados
// ‚úÖ Fun√ß√µes com par√¢metros e retorno
// ‚úÖ Factory Functions (padr√£o de design)
// ‚úÖ Estruturas de controle (if/else, switch)
// ‚úÖ Estruturas de repeti√ß√£o (for, forEach)
// ‚úÖ Valida√ß√£o de dados e tratamento de erros
// ‚úÖ Sistema CRUD (Create, Read, Update, Delete)
// ‚úÖ C√°lculos financeiros e l√≥gica de neg√≥cio
// ‚úÖ Manipula√ß√£o de estado da aplica√ß√£o
// ‚úÖ Modulariza√ß√£o e organiza√ß√£o de c√≥digo
//
// üí° METODOLOGIA:
// Cada se√ß√£o √© numerada e explica o "porqu√™" das decis√µes t√©cnicas,
// n√£o apenas o "como". Isso desenvolve o pensamento cr√≠tico do aluno.
//
// =====================================================================================

console.log("üõí SISTEMA DE E-COMMERCE COMPLETO");
console.log("=".repeat(60));

// =====================================================================================
// 1. CONFIGURA√á√ïES GLOBAIS E VARI√ÅVEIS FUNDAMENTAIS
// =====================================================================================
//
// üîç CONCEITO: Vari√°veis e Constantes
// 
// Por que usar CONST para configura√ß√µes?
// - Evita modifica√ß√µes acidentais de valores cr√≠ticos
// - Deixa claro que s√£o valores fixos do sistema
// - Melhora a legibilidade e manuten√ß√£o do c√≥digo
//
// Por que usar LET para contadores?
// - Permite modifica√ß√£o durante a execu√ß√£o
// - Escopo de bloco mais seguro que VAR
// - Evita problemas de hoisting (i√ßamento)

const NOME_LOJA = "TechStore Plus";           // string: nome imut√°vel da loja
const VERSAO_SISTEMA = "2.0.0";               // string: versionamento do sistema
const MOEDA = "R$";                           // string: s√≠mbolo da moeda
const FRETE_GRATIS_VALOR_MINIMO = 200.00;     // number: limite para frete gr√°tis

// üîç CONCEITO: Estado da Aplica√ß√£o
// Estas vari√°veis representam o "estado" atual do sistema
// Em aplica√ß√µes reais, isso seria armazenado em banco de dados
let sistemaAtivo = true;        // boolean: controla se o sistema est√° operacional
let totalVendasDia = 0;         // number: acumula valor total de vendas
let numeroVendasDia = 0;        // number: conta quantidade de vendas

// =====================================================================================
// 2. FACTORY FUNCTION PARA PRODUTOS - PADR√ÉO DE DESIGN FUNDAMENTAL
// =====================================================================================
//
// üîç CONCEITO: Factory Functions (Fun√ß√µes F√°brica)
//
// O QUE √â uma Factory Function?
// √â uma fun√ß√£o que retorna objetos novos a cada chamada, como uma "f√°brica" de objetos.
//
// POR QUE usar Factory Functions?
// ‚úÖ MODULARIDADE: F√°cil de reutilizar a fun√ß√£o de cria√ß√£o
// ‚úÖ CONSIST√äNCIA: Todos os produtos t√™m a mesma estrutura e m√©todos
// ‚úÖ EXTENSIBILIDADE: F√°cil adicionar novos m√©todos a todos os produtos
// ‚úÖ MANUTENIBILIDADE: Mudan√ßas na estrutura s√≥ precisam ser feitas na factory
// ‚úÖ ENCAPSULAMENTO: L√≥gica de cria√ß√£o fica centralizada
//
// ALTERNATIVAS e por que N√ÉO usamos:
// ‚ùå Objetos literais: Cada produto seria criado manualmente (repeti√ß√£o)
// ‚ùå Classes: Mais complexo para iniciantes, conceito mais avan√ßado
// ‚ùå Constructor Functions: Sintaxe mais confusa, requer 'new'
//
// CASOS DE USO da Factory Function:
// - Criar m√∫ltiplos objetos com estrutura similar
// - Validar dados antes da cria√ß√£o
// - Aplicar configura√ß√µes padr√£o
// - Adicionar m√©todos compartilhados

function criarProduto(id, nome, preco, categoria, estoque, descricao, peso, avaliacoes = 5.0) {
    // üîç CONCEITO: Par√¢metros com Valores Padr√£o
    // 'avaliacoes = 5.0' define um valor padr√£o caso n√£o seja fornecido
    
    // üîç CONCEITO: Retorno de Objeto Literal
    // A factory retorna um objeto com propriedades e m√©todos
    return {
        // ---------------------------------------------------------------------------------
        // PROPRIEDADES DO PRODUTO (Estado/Dados)
        // ---------------------------------------------------------------------------------
        id,                          // Desestrutura√ß√£o: equivale a id: id
        nome,                        // string: nome do produto
        preco,                       // number: pre√ßo em reais
        categoria,                   // string: categoria do produto
        estoque,                     // number: quantidade dispon√≠vel
        descricao,                   // string: descri√ß√£o detalhada
        peso,                        // number: peso em kg (para frete)
        ativo: true,                 // boolean: produto ativo no sistema
        avaliacoes,                  // number: nota m√©dia de avalia√ß√µes
        dataCadastro: new Date(),    // Date: timestamp de cria√ß√£o
        
        // ---------------------------------------------------------------------------------
        // M√âTODOS DO PRODUTO (Comportamentos/A√ß√µes)
        // ---------------------------------------------------------------------------------
        
        // üîç CONCEITO: M√©todos de Objeto
        // Fun√ß√µes dentro de objetos que operam sobre os dados do pr√≥prio objeto
        // 'this' refere-se ao objeto atual
        
        // M√âTODO: Calcular pre√ßo com desconto
        // USO: produto.calcularPrecoComDesconto(10) // 10% de desconto
        calcularPrecoComDesconto(percentual) {
            // üîç CONCEITO: Valida√ß√£o de Entrada
            // Sempre validar dados antes de processar
            if (percentual < 0 || percentual > 100) {
                console.log("‚ö†Ô∏è Percentual de desconto deve estar entre 0 e 100");
                return this.preco;  // Retorna pre√ßo original se inv√°lido
            }
            
            // üîç CONCEITO: C√°lculo Matem√°tico
            // (1 - percentual/100) converte porcentagem para decimal
            // Ex: 10% = 0.10, ent√£o (1 - 0.10) = 0.90 = 90% do pre√ßo
            return this.preco * (1 - percentual / 100);
        },
        
        // M√âTODO: Verificar se produto tem estoque suficiente
        // USO: produto.verificarDisponibilidade(3) // verifica se tem 3 unidades
        verificarDisponibilidade(quantidade = 1) {
            // üîç CONCEITO: Operadores L√≥gicos
            // && (E): ambas condi√ß√µes devem ser verdadeiras
            return this.ativo && this.estoque >= quantidade;
        },
        
        // M√âTODO: Reduzir estoque ap√≥s venda
        // USO: produto.reduzirEstoque(2) // remove 2 unidades do estoque
        reduzirEstoque(quantidade) {
            // üîç CONCEITO: Estrutura Condicional e Retorno Boolean
            if (this.verificarDisponibilidade(quantidade)) {
                this.estoque -= quantidade;  // Operador de atribui√ß√£o composta
                return true;   // Sucesso
            }
            return false;      // Falha (estoque insuficiente)
        },
        
        // M√âTODO: Adicionar produtos ao estoque
        // USO: produto.adicionarEstoque(10) // adiciona 10 unidades
        adicionarEstoque(quantidade) {
            if (quantidade > 0) {
                this.estoque += quantidade;
                return true;
            }
            return false;
        },
        
        // M√âTODO: Ativar/desativar produto
        // USO: produto.alterarStatus(false) // desativa produto
        alterarStatus(novoStatus) {
            this.ativo = novoStatus;
            return this.ativo;
        },
        
        // M√âTODO: Obter resumo formatado do produto
        // USO: console.log(produto.obterResumo())
        obterResumo() {
            // üîç CONCEITO: Operador Tern√°rio (Condicional Compacta)
            // condi√ß√£o ? valorSeVerdadeiro : valorSeFalso
            const status = this.ativo ? "Ativo" : "Inativo";
            const disponibilidade = this.estoque > 0 ? "Dispon√≠vel" : "Esgotado";
            
            // üîç CONCEITO: Template Literals (String Template)
            // Usar ${} para inserir vari√°veis em strings
            return `${this.nome} - ${this.categoria} - ${MOEDA}${this.preco.toFixed(2)} - ${status} - ${disponibilidade}`;
        },
        
        // M√âTODO: Calcular valor total do estoque deste produto
        // USO: let valorTotal = produto.calcularValorEstoque()
        calcularValorEstoque() {
            // üîç CONCEITO: Opera√ß√µes Matem√°ticas Simples
            return this.preco * this.estoque;
        }
    };
}

// =====================================================================================
// 3. INICIALIZA√á√ÉO DO BANCO DE DADOS DE PRODUTOS
// =====================================================================================
//
// üîç CONCEITO: Fun√ß√£o de Inicializa√ß√£o
//
// POR QUE criar uma fun√ß√£o separada para inicializar dados?
// ‚úÖ ORGANIZA√á√ÉO: Separa dados de l√≥gica de neg√≥cio
// ‚úÖ REUTILIZA√á√ÉO: Pode ser chamada para "resetar" o sistema
// ‚úÖ MANUTEN√á√ÉO: F√°cil adicionar/remover produtos iniciais
// ‚úÖ TESTABILIDADE: Pode ser testada independentemente

function inicializarBancoDadosProdutos() {
    // üîç CONCEITO: Array de Objetos (Estrutura de Dados)
    // Simula um banco de dados com dados iniciais
    const dadosIniciais = [
        {
            id: 1,
            nome: "iPhone 15 Pro",
            preco: 8999.00,
            categoria: "Smartphones",
            estoque: 12,
            descricao: "iPhone 15 Pro 256GB Tit√¢nio Natural",
            peso: 0.187,      // peso em kg
            avaliacoes: 4.8   // nota de 0 a 5
        },
        {
            id: 2,
            nome: "MacBook Pro M3",
            preco: 15999.00,
            categoria: "Notebooks",
            estoque: 8,
            descricao: "MacBook Pro 14 M3 512GB Space Gray",
            peso: 1.6,
            avaliacoes: 4.9
        },
        {
            id: 3,
            nome: "AirPods Pro 2",
            preco: 2199.00,
            categoria: "Acess√≥rios",
            estoque: 25,
            descricao: "AirPods Pro 2¬™ gera√ß√£o com cancelamento de ru√≠do",
            peso: 0.056,
            avaliacoes: 4.7
        },
        {
            id: 4,
            nome: "Apple Watch Series 9",
            preco: 3999.00,
            categoria: "Wearables",
            estoque: 15,
            descricao: "Apple Watch Series 9 45mm GPS Meia-noite",
            peso: 0.038,
            avaliacoes: 4.6
        },
        {
            id: 5,
            nome: "iPad Air M2",
            preco: 5499.00,
            categoria: "Tablets",
            estoque: 18,
            descricao: "iPad Air 11 M2 Wi-Fi 256GB Azul",
            peso: 0.462,
            avaliacoes: 4.8
        }
    ];
    
    // üîç CONCEITO: M√©todo MAP - Transforma√ß√£o de Arrays
    // 
    // O que faz: Transforma cada elemento do array em algo novo
    // Como funciona: Para cada objeto simples, cria um produto completo usando a factory
    // 
    // ANTES: Array de objetos simples (apenas dados)
    // DEPOIS: Array de objetos complexos (dados + m√©todos)
    //
    // Por que usar MAP aqui?
    // ‚úÖ Transforma dados brutos em objetos funcionais
    // ‚úÖ Aplica a factory function a todos os itens
    // ‚úÖ Mant√©m o mesmo n√∫mero de elementos
    // ‚úÖ C√≥digo limpo e funcional
    
    return dadosIniciais.map(produto => 
        criarProduto(
            produto.id,
            produto.nome,
            produto.preco,
            produto.categoria,
            produto.estoque,
            produto.descricao,
            produto.peso,
            produto.avaliacoes
        )
    );
}

// üîç CONCEITO: Execu√ß√£o e Armazenamento
// Chama a fun√ß√£o e armazena o resultado em uma constante
const produtos = inicializarBancoDadosProdutos();

// =====================================================================================
// 4. FUN√á√ïES DE GERENCIAMENTO DE PRODUTOS (CRUD)
// =====================================================================================
//
// üîç CONCEITO: Sistema CRUD
// Create (Criar), Read (Ler), Update (Atualizar), Delete (Deletar)
// S√£o as 4 opera√ß√µes b√°sicas de qualquer sistema de dados

// FUN√á√ÉO: Adicionar novo produto ao banco (CREATE)
function adicionarProdutoAoBanco(nome, preco, categoria, estoque, descricao, peso, avaliacoes) {
    // üîç CONCEITO: Gera√ß√£o Autom√°tica de ID
    // Encontra o maior ID existente e adiciona 1
    // Math.max(...array) encontra o maior valor
    // O operador spread (...) "espalha" os elementos do array
    const maiorId = produtos.length > 0 ? Math.max(...produtos.map(p => p.id)) : 0;
    const novoId = maiorId + 1;
    
    // üîç CONCEITO: Valida√ß√£o Robusta de Dados
    // SEMPRE validar dados antes de processar
    // Retorna objeto com sucesso/erro para facilitar tratamento
    
    if (!nome || nome.length < 2) {
        return { sucesso: false, erro: "Nome deve ter pelo menos 2 caracteres" };
    }
    
    if (!preco || preco <= 0) {
        return { sucesso: false, erro: "Pre√ßo deve ser maior que zero" };
    }
    
    if (!categoria || categoria.length < 2) {
        return { sucesso: false, erro: "Categoria deve ter pelo menos 2 caracteres" };
    }
    
    if (estoque < 0) {
        return { sucesso: false, erro: "Estoque n√£o pode ser negativo" };
    }
    
    // üîç CONCEITO: Verifica√ß√£o de Duplicatas
    // Usa FIND para procurar produto com mesmo nome
    // toLowerCase() garante compara√ß√£o case-insensitive
    const produtoExistente = produtos.find(p => 
        p.nome.toLowerCase() === nome.toLowerCase()
    );
    
    if (produtoExistente) {
        return { sucesso: false, erro: "Produto com este nome j√° existe" };
    }
    
    // üîç CONCEITO: Cria√ß√£o e Inser√ß√£o
    // Usa a factory function para criar produto consistente
    const novoProduto = criarProduto(
        novoId,
        nome,
        preco,
        categoria,
        estoque || 0,        // Valor padr√£o se n√£o fornecido
        descricao || "",     // String vazia se n√£o fornecida
        peso || 0,           // Zero se n√£o fornecido
        avaliacoes || 5.0    // Nota m√°xima se n√£o fornecida
    );
    
    // üîç CONCEITO: Adi√ß√£o ao Array
    // PUSH adiciona elemento no final do array
    produtos.push(novoProduto);
    
    // üîç CONCEITO: Retorno Estruturado
    // Objeto com status, dados e mensagem para facilitar uso
    return { 
        sucesso: true, 
        produto: novoProduto,
        mensagem: `Produto "${nome}" adicionado com sucesso!`
    };
}

// FUN√á√ÉO: Buscar produto por ID (READ)
function buscarProdutoPorId(id) {
    // üîç CONCEITO: M√©todo FIND
    // Procura o PRIMEIRO elemento que atende √† condi√ß√£o
    // Retorna o elemento encontrado ou undefined
    // && garante que s√≥ busca produtos ativos
    return produtos.find(produto => produto.id === id && produto.ativo) || null;
}

// FUN√á√ÉO: Listar produtos por categoria (READ com filtro)
function listarProdutosPorCategoria(categoria) {
    // üîç CONCEITO: M√©todo FILTER
    // Retorna TODOS os elementos que atendem √† condi√ß√£o
    // toLowerCase() garante compara√ß√£o case-insensitive
    return produtos.filter(produto => 
        produto.categoria.toLowerCase() === categoria.toLowerCase() && produto.ativo
    );
}

// =====================================================================================
// 5. FACTORY FUNCTION PARA USU√ÅRIOS
// =====================================================================================
//
// üîç CONCEITO: Reutiliza√ß√£o do Padr√£o Factory
// Aplicamos o mesmo padr√£o para usu√°rios, demonstrando consist√™ncia

const usuarios = [];  // Array para armazenar usu√°rios cadastrados

function criarUsuario(nome, email, idade, endereco) {
    // üîç CONCEITO: Valida√ß√£o Espec√≠fica por Tipo de Dado
    
    // Valida√ß√£o de STRING
    if (!nome || nome.length < 2) {
        return { sucesso: false, erro: "Nome deve ter pelo menos 2 caracteres" };
    }
    
    // Valida√ß√£o de EMAIL (b√°sica)
    // Verifica se cont√©m @ e . (valida√ß√£o real seria mais complexa)
    if (!email || !email.includes("@") || !email.includes(".")) {
        return { sucesso: false, erro: "Email inv√°lido" };
    }
    
    // Valida√ß√£o de IDADE (range num√©rico)
    if (!idade || idade < 16 || idade > 120) {
        return { sucesso: false, erro: "Idade deve estar entre 16 e 120 anos" };
    }
    
    // üîç CONCEITO: Verifica√ß√£o de Unicidade
    // SOME retorna true se PELO MENOS UM elemento atende √† condi√ß√£o
    const emailExiste = usuarios.some(u => u.email === email);
    if (emailExiste) {
        return { sucesso: false, erro: "Email j√° cadastrado" };
    }
    
    // üîç CONCEITO: L√≥gica de Neg√≥cio Condicional
    // Determina categoria e benef√≠cios baseado na idade
    let categoria, desconto, limiteCreditoBonus;
    
    if (idade < 25) {
        categoria = "Jovem";
        desconto = 5;           // 5% de desconto
        limiteCreditoBonus = 1000;
    } else if (idade >= 60) {
        categoria = "Senior";
        desconto = 15;          // 15% de desconto
        limiteCreditoBonus = 5000;
    } else {
        categoria = "Adulto";
        desconto = 0;           // Sem desconto
        limiteCreditoBonus = 2000;
    }
    
    // üîç CONCEITO: Objeto Complexo com M√©todos
    const novoUsuario = {
        // ---------------------------------------------------------------------------------
        // PROPRIEDADES B√ÅSICAS
        // ---------------------------------------------------------------------------------
        id: Date.now() + Math.random(),  // ID √∫nico baseado em timestamp
        nome,
        email,
        idade,
        endereco,
        categoria,
        desconto,
        limiteCreditoBonus,
        ativo: true,
        dataCadastro: new Date(),
        
        // ---------------------------------------------------------------------------------
        // PROPRIEDADES DE HIST√ìRICO
        // ---------------------------------------------------------------------------------
        totalCompras: 0,         // Valor total j√° gasto
        numeroCompras: 0,        // Quantidade de compras realizadas
        historicoCompras: [],    // Array com hist√≥rico detalhado
        carrinho: [],            // Array com itens do carrinho atual
        
        // ---------------------------------------------------------------------------------
        // M√âTODOS DO USU√ÅRIO
        // ---------------------------------------------------------------------------------
        
        // M√âTODO: Registrar uma nova compra
        adicionarCompra(valor, itens) {
            this.totalCompras += valor;
            this.numeroCompras++;
            // üîç CONCEITO: Spread Operator para C√≥pia
            // [...itens] cria uma c√≥pia do array, n√£o uma refer√™ncia
            this.historicoCompras.push({
                data: new Date(),
                valor,
                itens: [...itens]
            });
        },
        
        // M√âTODO: Calcular desconto baseado na categoria
        calcularDesconto(valor) {
            if (this.desconto > 0) {
                return valor * (this.desconto / 100);
            }
            return 0;
        },
        
        // M√âTODO: Verificar se pode fazer uma compra
        podeComprar(valor) {
            // üîç CONCEITO: Operador OU (||)
            // Se valor for menor que limite OU se j√° comprou mais de R$ 1000
            return valor <= this.limiteCreditoBonus || this.totalCompras > 1000;
        },
        
        // M√âTODO: Obter resumo do usu√°rio
        obterResumo() {
            // üîç CONCEITO: Retorno de Objeto Seletivo
            // Retorna apenas informa√ß√µes relevantes, n√£o dados sens√≠veis
            return {
                nome: this.nome,
                categoria: this.categoria,
                totalCompras: this.totalCompras,
                numeroCompras: this.numeroCompras,
                desconto: this.desconto
            };
        }
    };
    
    // üîç CONCEITO: Adi√ß√£o ao Array Global
    usuarios.push(novoUsuario);
    return { 
        sucesso: true, 
        usuario: novoUsuario,
        mensagem: `Usu√°rio ${nome} cadastrado com sucesso!`
    };
}

// FUN√á√ÉO: Buscar usu√°rio por email
function buscarUsuarioPorEmail(email) {
    return usuarios.find(u => u.email === email && u.ativo) || null;
}

// =====================================================================================
// 6. SISTEMA DE CARRINHO DE COMPRAS
// =====================================================================================
//
// üîç CONCEITO: Manipula√ß√£o de Estado Complexo
// O carrinho representa estado mut√°vel que deve ser gerenciado cuidadosamente

// FUN√á√ÉO: Adicionar produto ao carrinho
function adicionarAoCarrinho(usuario, produtoId, quantidade = 1) {
    // üîç CONCEITO: Busca e Valida√ß√£o
    const produto = produtos.find(p => p.id === produtoId);
    
    if (!produto) {
        return { sucesso: false, erro: "Produto n√£o encontrado" };
    }
    
    // üîç CONCEITO: Verifica√ß√£o de Regra de Neg√≥cio
    if (!produto.verificarDisponibilidade(quantidade)) {
        return { 
            sucesso: false, 
            erro: `Estoque insuficiente. Dispon√≠vel: ${produto.estoque}` 
        };
    }
    
    // üîç CONCEITO: Verifica√ß√£o de Item Existente no Carrinho
    const itemExistente = usuario.carrinho.find(item => item.produto.id === produtoId);
    
    if (itemExistente) {
        // üîç CONCEITO: Atualiza√ß√£o de Quantidade
        const novaQuantidade = itemExistente.quantidade + quantidade;
        if (!produto.verificarDisponibilidade(novaQuantidade)) {
            return { 
                sucesso: false, 
                erro: "Estoque insuficiente para quantidade total" 
            };
        }
        itemExistente.quantidade = novaQuantidade;
        itemExistente.subtotal = produto.preco * novaQuantidade;
    } else {
        // üîç CONCEITO: Adi√ß√£o de Novo Item
        usuario.carrinho.push({
            produto,                          // Refer√™ncia ao objeto produto
            quantidade,                       // Quantidade desejada
            subtotal: produto.preco * quantidade,  // Valor total do item
            dataAdicao: new Date()           // Timestamp de quando foi adicionado
        });
    }
    
    return { 
        sucesso: true, 
        mensagem: `${produto.nome} adicionado ao carrinho` 
    };
}

// FUN√á√ÉO: Remover produto do carrinho
function removerDoCarrinho(usuario, produtoId) {
    // üîç CONCEITO: Contagem Antes/Depois para Verifica√ß√£o
    const indiceInicial = usuario.carrinho.length;
    
    // üîç CONCEITO: M√©todo FILTER para Remo√ß√£o
    // Mant√©m todos os itens EXCETO o que tem o ID especificado
    usuario.carrinho = usuario.carrinho.filter(item => item.produto.id !== produtoId);
    
    // üîç CONCEITO: Verifica√ß√£o de Sucesso da Opera√ß√£o
    if (usuario.carrinho.length < indiceInicial) {
        return { sucesso: true, mensagem: "Item removido do carrinho" };
    }
    
    return { sucesso: false, erro: "Item n√£o encontrado no carrinho" };
}

// FUN√á√ÉO: Limpar carrinho completamente
function limparCarrinho(usuario) {
    // üîç CONCEITO: Reset de Array
    usuario.carrinho = [];
    return { sucesso: true, mensagem: "Carrinho limpo" };
}

// =====================================================================================
// 7. FUN√á√ïES DE C√ÅLCULO FINANCEIRO
// =====================================================================================
//
// üîç CONCEITO: L√≥gica de Neg√≥cio Complexa
// Estas fun√ß√µes implementam regras de neg√≥cio reais de e-commerce

// FUN√á√ÉO: Calcular frete baseado em estado e peso
function calcularFrete(estado, pesoTotal, valorCompra) {
    // üîç CONCEITO: Regra de Neg√≥cio Condicional
    // Frete gr√°tis para compras acima de valor m√≠nimo
    if (valorCompra >= FRETE_GRATIS_VALOR_MINIMO) {
        return { 
            valor: 0, 
            gratuito: true, 
            motivo: "Compra acima de R$ 200" 
        };
    }
    
    // üîç CONCEITO: Tabela de Dados (Objeto como Mapa)
    // Simula tabela de pre√ßos de frete por estado
    const tabelaFrete = {
        "SP": 12.00, "RJ": 15.00, "MG": 18.00, "RS": 22.00,
        "PR": 20.00, "SC": 20.00, "GO": 25.00, "DF": 22.00,
        "BA": 28.00, "PE": 30.00, "CE": 32.00, "AM": 45.00
    };
    
    // üîç CONCEITO: Busca com Valor Padr√£o
    // || 35.00 define valor padr√£o se estado n√£o estiver na tabela
    const freteBase = tabelaFrete[estado.toUpperCase()] || 35.00;
    
    // üîç CONCEITO: C√°lculo Condicional
    // Acr√©scimo por peso adicional (acima de 1kg)
    const acrescimoPeso = pesoTotal > 1 ? (pesoTotal - 1) * 3 : 0;
    
    return { 
        valor: freteBase + acrescimoPeso, 
        gratuito: false,
        detalhes: { base: freteBase, peso: acrescimoPeso }
    };
}

// FUN√á√ÉO: Calcular impostos por categoria
function calcularImpostos(valor, categoria) {
    // üîç CONCEITO: Tabela de Al√≠quotas
    const tabelaImpostos = {
        "Smartphones": 0.20,    // 20%
        "Notebooks": 0.18,      // 18%
        "Tablets": 0.16,        // 16%
        "Acess√≥rios": 0.12,     // 12%
        "Wearables": 0.15       // 15%
    };
    
    const aliquota = tabelaImpostos[categoria] || 0.15;  // 15% padr√£o
    return valor * aliquota;
}

// FUN√á√ÉO: Calcular parcelamento com ou sem juros
function calcularParcelamento(valor, parcelas) {
    // üîç CONCEITO: Valida√ß√£o de Entrada Simples
    if (parcelas === 1) {
        return {
            parcelas: 1,
            valorParcela: valor,
            valorTotal: valor,
            juros: 0,
            temJuros: false
        };
    }
    
    // üîç CONCEITO: L√≥gica de Juros Progressiva
    let juros = 0;
    let temJuros = false;
    
    if (parcelas > 6) {
        juros = 0.0299; // 2.99% ao m√™s para mais de 6x
        temJuros = true;
    } else if (parcelas > 3) {
        juros = 0.0199; // 1.99% ao m√™s para 4-6x
        temJuros = true;
    }
    // 1-3x sem juros
    
    if (temJuros) {
        // üîç CONCEITO: F√≥rmula de Juros Compostos
        // Math.pow(base, expoente) calcula potencia√ß√£o
        const valorComJuros = valor * Math.pow(1 + juros, parcelas);
        return {
            parcelas,
            valorParcela: valorComJuros / parcelas,
            valorTotal: valorComJuros,
            juros: valorComJuros - valor,
            temJuros: true,
            taxaJuros: juros * 100
        };
    }
    
    // Sem juros
    return {
        parcelas,
        valorParcela: valor / parcelas,
        valorTotal: valor,
        juros: 0,
        temJuros: false
    };
}

// FUN√á√ÉO: Calcular resumo completo da compra
function calcularResumoCompra(usuario) {
    // üîç CONCEITO: Valida√ß√£o de Pr√©-condi√ß√£o
    if (!usuario.carrinho || usuario.carrinho.length === 0) {
        return { sucesso: false, erro: "Carrinho vazio" };
    }
    
    // üîç CONCEITO: Acumuladores para C√°lculos
    let subtotal = 0;
    let pesoTotal = 0;
    let impostoTotal = 0;
    
    // üîç CONCEITO: Itera√ß√£o com forEach para Acumular Valores
    usuario.carrinho.forEach(item => {
        subtotal += item.subtotal;
        pesoTotal += item.produto.peso * item.quantidade;
        impostoTotal += calcularImpostos(item.subtotal, item.produto.categoria);
    });
    
    // üîç CONCEITO: Aplica√ß√£o de Descontos
    const descontoUsuario = usuario.calcularDesconto(subtotal);
    
    // üîç CONCEITO: Desconto Progressivo por Volume
    let descontoVolume = 0;
    if (subtotal > 5000) {
        descontoVolume = subtotal * 0.08; // 8% para compras acima de R$ 5000
    } else if (subtotal > 2000) {
        descontoVolume = subtotal * 0.05; // 5% para compras acima de R$ 2000
    } else if (subtotal > 1000) {
        descontoVolume = subtotal * 0.03; // 3% para compras acima de R$ 1000
    }
    
    const totalDescontos = descontoUsuario + descontoVolume;
    const valorComDesconto = subtotal - totalDescontos;
    
    // üîç CONCEITO: C√°lculo de Frete
    const frete = calcularFrete(
        usuario.endereco?.estado || "SP",  // Operador de encadeamento opcional
        pesoTotal, 
        valorComDesconto
    );
    
    // üîç CONCEITO: Totaliza√ß√£o Final
    const valorFinal = valorComDesconto + frete.valor + impostoTotal;
    
    // üîç CONCEITO: M√©todo REDUCE para Soma
    // Soma todas as quantidades do carrinho
    const quantidadeTotal = usuario.carrinho.reduce((total, item) => total + item.quantidade, 0);
    
    return {
        sucesso: true,
        resumo: {
            subtotal,
            descontos: {
                usuario: descontoUsuario,
                volume: descontoVolume,
                total: totalDescontos
            },
            impostos: impostoTotal,
            frete: frete,
            valorFinal,
            pesoTotal,
            economia: totalDescontos,
            itens: usuario.carrinho.length,
            quantidadeTotal
        }
    };
}

// =====================================================================================
// 8. SISTEMA DE CHECKOUT (FINALIZA√á√ÉO DE COMPRA)
// =====================================================================================
//
// üîç CONCEITO: Transa√ß√£o Complexa
// O checkout √© uma "transa√ß√£o" que deve ser at√¥mica (tudo ou nada)

function finalizarCompra(usuario, formaPagamento, parcelas = 1) {
    // üîç CONCEITO: Reutiliza√ß√£o de Fun√ß√£o
    const resumo = calcularResumoCompra(usuario);
    
    if (!resumo.sucesso) {
        return resumo;  // Propaga erro do c√°lculo
    }
    
    // üîç CONCEITO: Verifica√ß√£o de Limite de Cr√©dito
    if (!usuario.podeComprar(resumo.resumo.valorFinal)) {
        return { 
            sucesso: false, 
            erro: "Limite de cr√©dito insuficiente para esta compra" 
        };
    }
    
    // üîç CONCEITO: Verifica√ß√£o de Estoque Completa
    // Usa FOR...OF para permitir early return
    for (let item of usuario.carrinho) {
        if (!item.produto.verificarDisponibilidade(item.quantidade)) {
            return { 
                sucesso: false, 
                erro: `Produto ${item.produto.nome} n√£o tem estoque suficiente` 
            };
        }
    }
    
    // üîç CONCEITO: Opera√ß√£o de Redu√ß√£o de Estoque
    // S√≥ executa se todas as verifica√ß√µes passaram
    usuario.carrinho.forEach(item => {
        item.produto.reduzirEstoque(item.quantidade);
    });
    
    // üîç CONCEITO: C√°lculo Condicional de Parcelamento
    let dadosParcelamento = null;
    if (formaPagamento === "cartao" && parcelas > 1) {
        dadosParcelamento = calcularParcelamento(resumo.resumo.valorFinal, parcelas);
    }
    
    // üîç CONCEITO: Cria√ß√£o de Objeto de Pedido
    const pedido = {
        id: `PED${Date.now()}`,           // ID √∫nico baseado em timestamp
        usuario: usuario.obterResumo(),   // Snapshot dos dados do usu√°rio
        itens: [...usuario.carrinho],     // C√≥pia dos itens do carrinho
        resumo: resumo.resumo,            // Dados calculados da compra
        formaPagamento,
        parcelamento: dadosParcelamento,
        status: "confirmado",
        dataCompra: new Date(),
        // üîç CONCEITO: C√°lculo de Data Futura
        previsaoEntrega: new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)) // 7 dias
    };
    
    // üîç CONCEITO: Atualiza√ß√£o de Hist√≥rico
    usuario.adicionarCompra(resumo.resumo.valorFinal, usuario.carrinho);
    
    // üîç CONCEITO: Atualiza√ß√£o de Estat√≠sticas Globais
    totalVendasDia += resumo.resumo.valorFinal;
    numeroVendasDia++;
    
    // üîç CONCEITO: Limpeza de Estado
    limparCarrinho(usuario);
    
    return {
        sucesso: true,
        pedido,
        mensagem: `Compra realizada com sucesso! Pedido ${pedido.id}`
    };
}

// =====================================================================================
// 9. FUN√á√ïES DE RELAT√ìRIO E EXIBI√á√ÉO
// =====================================================================================
//
// üîç CONCEITO: Fun√ß√µes de Apresenta√ß√£o
// Separam l√≥gica de neg√≥cio da apresenta√ß√£o de dados

// FUN√á√ÉO: Exibir cat√°logo de produtos
function exibirCatalogo() {
    console.log("\nüì± CAT√ÅLOGO DE PRODUTOS");
    console.log("=".repeat(50));
    
    // üîç CONCEITO: Itera√ß√£o com forEach para Exibi√ß√£o
    produtos.forEach(produto => {
        if (produto.ativo) {
            // üîç CONCEITO: Formata√ß√£o Condicional
            const disponibilidade = produto.estoque > 0 ? "‚úÖ Dispon√≠vel" : "‚ùå Esgotado";
            
            console.log(`${produto.id}. ${produto.nome}`);
            console.log(`   Pre√ßo: ${MOEDA}${produto.preco.toFixed(2)}`);
            console.log(`   Categoria: ${produto.categoria}`);
            console.log(`   Estoque: ${produto.estoque} | ${disponibilidade}`);
            console.log(`   Avalia√ß√£o: ‚≠ê${produto.avaliacoes}/5.0`);
            console.log(`   ${produto.descricao}`);
            console.log("-".repeat(50));
        }
    });
}

// FUN√á√ÉO: Exibir carrinho do usu√°rio
function exibirCarrinho(usuario) {
    // üîç CONCEITO: Verifica√ß√£o de Estado Vazio
    if (!usuario.carrinho || usuario.carrinho.length === 0) {
        console.log("üõí Carrinho vazio");
        return;
    }
    
    console.log(`\nüõí CARRINHO DE ${usuario.nome.toUpperCase()}`);
    console.log("=".repeat(50));
    
    // üîç CONCEITO: Itera√ß√£o com √çndice
    usuario.carrinho.forEach((item, index) => {
        console.log(`${index + 1}. ${item.produto.nome}`);
        console.log(`   Quantidade: ${item.quantidade}x`);
        console.log(`   Pre√ßo unit√°rio: ${MOEDA}${item.produto.preco.toFixed(2)}`);
        console.log(`   Subtotal: ${MOEDA}${item.subtotal.toFixed(2)}`);
        console.log("-".repeat(30));
    });
    
    // üîç CONCEITO: Exibi√ß√£o de Resumo
    const resumo = calcularResumoCompra(usuario);
    if (resumo.sucesso) {
        console.log(`üí∞ VALOR TOTAL: ${MOEDA}${resumo.resumo.valorFinal.toFixed(2)}`);
        if (resumo.resumo.economia > 0) {
            console.log(`üí∏ Economia: ${MOEDA}${resumo.resumo.economia.toFixed(2)}`);
        }
    }
}

// FUN√á√ÉO: Gerar relat√≥rio de vendas
function gerarRelatorioVendas() {
    console.log("\nüìä RELAT√ìRIO DE VENDAS DO DIA");
    console.log("=".repeat(50));
    console.log(`N√∫mero de vendas: ${numeroVendasDia}`);
    console.log(`Total vendido: ${MOEDA}${totalVendasDia.toFixed(2)}`);
    
    // üîç CONCEITO: C√°lculo com Prote√ß√£o contra Divis√£o por Zero
    const ticketMedio = numeroVendasDia > 0 ? (totalVendasDia / numeroVendasDia).toFixed(2) : "0.00";
    console.log(`Ticket m√©dio: ${MOEDA}${ticketMedio}`);
    
    // üîç CONCEITO: Filtro e An√°lise de Dados
    console.log("\n‚ö†Ô∏è PRODUTOS COM BAIXO ESTOQUE:");
    produtos
        .filter(p => p.estoque < 5 && p.ativo)  // Produtos ativos com menos de 5 unidades
        .forEach(p => {
            console.log(`- ${p.nome}: ${p.estoque} unidades`);
        });
}

// =====================================================================================
// 10. SIMULA√á√ÉO COMPLETA DO SISTEMA
// =====================================================================================
//
// üîç CONCEITO: Fun√ß√£o de Demonstra√ß√£o
// Integra todos os componentes em um exemplo pr√°tico e completo

function executarSimulacao() {
    console.log("\nüöÄ INICIANDO SIMULA√á√ÉO COMPLETA");
    console.log("=".repeat(60));
    
    // ---------------------------------------------------------------------------------
    // PASSO 1: CADASTRO DE USU√ÅRIOS
    // ---------------------------------------------------------------------------------
    console.log("\nüë• CADASTRANDO USU√ÅRIOS...");
    
    // üîç CONCEITO: Cria√ß√£o de Usu√°rios Diversos
    // Testa diferentes categorias de usu√°rio (jovem, adulto, senior)
    const usuario1 = criarUsuario(
        "Jo√£o Silva", 
        "joao@email.com", 
        28, 
        { rua: "Rua A, 123", cidade: "S√£o Paulo", estado: "SP", cep: "01234-567" }
    );
    
    const usuario2 = criarUsuario(
        "Maria Santos", 
        "maria@email.com", 
        65, 
        { rua: "Av. B, 456", cidade: "Rio de Janeiro", estado: "RJ", cep: "20123-456" }
    );
    
    const usuario3 = criarUsuario(
        "Pedro Lima", 
        "pedro@email.com", 
        22, 
        { rua: "Rua C, 789", cidade: "Belo Horizonte", estado: "MG", cep: "30123-789" }
    );
    
    // üîç CONCEITO: Verifica√ß√£o de Sucesso
    if (usuario1.sucesso) console.log(`‚úÖ ${usuario1.mensagem}`);
    if (usuario2.sucesso) console.log(`‚úÖ ${usuario2.mensagem}`);
    if (usuario3.sucesso) console.log(`‚úÖ ${usuario3.mensagem}`);
    
    // ---------------------------------------------------------------------------------
    // PASSO 2: EXIBI√á√ÉO DO CAT√ÅLOGO
    // ---------------------------------------------------------------------------------
    exibirCatalogo();
    
    // ---------------------------------------------------------------------------------
    // PASSO 3: SIMULA√á√ÉO DE COMPRAS
    // ---------------------------------------------------------------------------------
    console.log("\nüõçÔ∏è SIMULANDO COMPRAS...");
    
    // üîç CONCEITO: Simula√ß√£o de Compra do Jo√£o (Usu√°rio Adulto)
    const joao = usuario1.usuario;
    console.log(`\n--- COMPRA DO ${joao.nome.toUpperCase()} ---`);
    
    // Adiciona produtos ao carrinho
    adicionarAoCarrinho(joao, 1, 1); // iPhone
    adicionarAoCarrinho(joao, 3, 2); // 2x AirPods
    
    exibirCarrinho(joao);
    
    // üîç CONCEITO: Exibi√ß√£o Detalhada de Resumo
    const resumoJoao = calcularResumoCompra(joao);
    if (resumoJoao.sucesso) {
        console.log("\nüí≥ RESUMO DA COMPRA:");
        const r = resumoJoao.resumo;
        console.log(`Subtotal: ${MOEDA}${r.subtotal.toFixed(2)}`);
        console.log(`Desconto usu√°rio: -${MOEDA}${r.descontos.usuario.toFixed(2)}`);
        console.log(`Desconto volume: -${MOEDA}${r.descontos.volume.toFixed(2)}`);
        console.log(`Impostos: ${MOEDA}${r.impostos.toFixed(2)}`);
        console.log(`Frete: ${MOEDA}${r.frete.valor.toFixed(2)} ${r.frete.gratuito ? "(GR√ÅTIS)" : ""}`);
        console.log(`TOTAL: ${MOEDA}${r.valorFinal.toFixed(2)}`);
    }
    
    // üîç CONCEITO: Finaliza√ß√£o com Parcelamento
    const pedidoJoao = finalizarCompra(joao, "cartao", 3);
    if (pedidoJoao.sucesso) {
        console.log(`‚úÖ ${pedidoJoao.mensagem}`);
        if (pedidoJoao.pedido.parcelamento) {
            const p = pedidoJoao.pedido.parcelamento;
            console.log(`üí≥ Parcelamento: ${p.parcelas}x de ${MOEDA}${p.valorParcela.toFixed(2)}`);
        }
    }
    
    // üîç CONCEITO: Simula√ß√£o de Compra da Maria (Usu√°ria Senior com Desconto)
    const maria = usuario2.usuario;
    console.log(`\n--- COMPRA DA ${maria.nome.toUpperCase()} ---`);
    
    adicionarAoCarrinho(maria, 2, 1); // MacBook
    adicionarAoCarrinho(maria, 4, 1); // Apple Watch
    
    exibirCarrinho(maria);
    
    const pedidoMaria = finalizarCompra(maria, "pix");
    if (pedidoMaria.sucesso) {
        console.log(`‚úÖ ${pedidoMaria.mensagem}`);
    }
    
    // üîç CONCEITO: Simula√ß√£o de Compra do Pedro (Usu√°rio Jovem)
    const pedro = usuario3.usuario;
    console.log(`\n--- COMPRA DO ${pedro.nome.toUpperCase()} ---`);
    
    adicionarAoCarrinho(pedro, 5, 1); // iPad
    adicionarAoCarrinho(pedro, 3, 1); // AirPods
    
    exibirCarrinho(pedro);
    
    const pedidoPedro = finalizarCompra(pedro, "debito");
    if (pedidoPedro.sucesso) {
        console.log(`‚úÖ ${pedidoPedro.mensagem}`);
    }
    
    // ---------------------------------------------------------------------------------
    // PASSO 4: RELAT√ìRIOS FINAIS
    // ---------------------------------------------------------------------------------
    gerarRelatorioVendas();
    
    console.log("\nüë• RESUMO DOS USU√ÅRIOS:");
    usuarios.forEach(user => {
        const resumo = user.obterResumo();
        console.log(`- ${resumo.nome} (${resumo.categoria}): ${resumo.numeroCompras} compras, ${MOEDA}${resumo.totalCompras.toFixed(2)} total`);
    });
    
    console.log("\n‚úÖ SIMULA√á√ÉO COMPLETA FINALIZADA!");
    console.log("=".repeat(60));
}

// =====================================================================================
// 11. EXECU√á√ÉO DA SIMULA√á√ÉO E RESUMO EDUCACIONAL
// =====================================================================================

// üîç CONCEITO: Execu√ß√£o Principal
executarSimulacao();

// =====================================================================================
// 12. RESUMO EDUCACIONAL COMPLETO
// =====================================================================================

console.log("\nüéØ CONCEITOS DE JAVASCRIPT APLICADOS NESTE PROJETO:");
console.log("=".repeat(70));

console.log("\nüìù VARI√ÅVEIS E TIPOS:");
console.log("‚úÖ const - Para valores imut√°veis (configura√ß√µes)");
console.log("‚úÖ let - Para valores mut√°veis (contadores, estados)");
console.log("‚úÖ string, number, boolean, object, array - Todos os tipos b√°sicos");

console.log("\nüè≠ FACTORY FUNCTIONS:");
console.log("‚úÖ Padr√£o de cria√ß√£o de objetos consistentes");
console.log("‚úÖ Encapsulamento de l√≥gica de cria√ß√£o");
console.log("‚úÖ M√©todos compartilhados entre inst√¢ncias");
console.log("‚úÖ Valida√ß√£o centralizada de dados");

console.log("\nüîß M√âTODOS DE ARRAY:");
console.log("‚úÖ map() - Transforma√ß√£o de elementos");
console.log("‚úÖ filter() - Filtragem de elementos");
console.log("‚úÖ find() - Busca de elemento espec√≠fico");
console.log("‚úÖ forEach() - Itera√ß√£o sem retorno");
console.log("‚úÖ some() - Verifica√ß√£o de exist√™ncia");
console.log("‚úÖ reduce() - Acumula√ß√£o de valores");

console.log("\n‚ö° FUN√á√ïES:");
console.log("‚úÖ Declara√ß√£o e express√£o de fun√ß√µes");
console.log("‚úÖ Par√¢metros com valores padr√£o");
console.log("‚úÖ Retorno de objetos e valores");
console.log("‚úÖ Fun√ß√µes puras vs. com efeitos colaterais");

console.log("\nüéÆ ESTRUTURAS DE CONTROLE:");
console.log("‚úÖ if/else - Condicionais simples e complexas");
console.log("‚úÖ Operador tern√°rio - Condicionais compactas");
console.log("‚úÖ && e || - Operadores l√≥gicos");
console.log("‚úÖ for...of - Itera√ß√£o sobre arrays");

console.log("\nüìä MANIPULA√á√ÉO DE DADOS:");
console.log("‚úÖ Objetos literais e propriedades din√¢micas");
console.log("‚úÖ Spread operator (...) para c√≥pias");
console.log("‚úÖ Destructuring para extra√ß√£o de dados");
console.log("‚úÖ Template literals para formata√ß√£o");

console.log("\nüõ°Ô∏è VALIDA√á√ÉO E TRATAMENTO:");
console.log("‚úÖ Valida√ß√£o de entrada de dados");
console.log("‚úÖ Tratamento de erros com objetos de resposta");
console.log("‚úÖ Verifica√ß√£o de tipos e valores");
console.log("‚úÖ Prote√ß√£o contra divis√£o por zero");

console.log("\nüíº L√ìGICA DE NEG√ìCIO:");
console.log("‚úÖ C√°lculos financeiros (juros, descontos, impostos)");
console.log("‚úÖ Regras de neg√≥cio condicionais");
console.log("‚úÖ Estado da aplica√ß√£o e transa√ß√µes");
console.log("‚úÖ Sistema CRUD completo");

console.log("\nüèóÔ∏è ARQUITETURA E DESIGN:");
console.log("‚úÖ Modulariza√ß√£o de c√≥digo em fun√ß√µes");
console.log("‚úÖ Separa√ß√£o de responsabilidades");
console.log("‚úÖ Reutiliza√ß√£o de c√≥digo");
console.log("‚úÖ Padr√µes de design (Factory, State)");

console.log("\nüìà CONCEITOS AVAN√áADOS APLICADOS:");
console.log("‚úÖ Closure (fun√ß√µes internas)");
console.log("‚úÖ Higher-order functions (fun√ß√µes que recebem fun√ß√µes)");
console.log("‚úÖ Imutabilidade de dados (c√≥pias vs. refer√™ncias)");
console.log("‚úÖ Composi√ß√£o de fun√ß√µes");

console.log("\nüí° PR√ìXIMOS PASSOS PARA EXPANS√ÉO:");
console.log("=".repeat(50));
console.log("üîπ Adicionar persist√™ncia de dados (localStorage/banco)");
console.log("üîπ Implementar interface web (HTML/CSS/DOM)");
console.log("üîπ Adicionar sistema de avalia√ß√µes e coment√°rios");
console.log("üîπ Criar dashboard administrativo");
console.log("üîπ Implementar sistema de cupons e promo√ß√µes");
console.log("üîπ Adicionar integra√ß√£o com APIs de pagamento");
console.log("üîπ Implementar busca e filtros avan√ßados");
console.log("üîπ Adicionar sistema de notifica√ß√µes");
console.log("üîπ Criar relat√≥rios anal√≠ticos");
console.log("üîπ Implementar autentica√ß√£o e autoriza√ß√£o");

console.log("\nüéì VALOR PEDAG√ìGICO DESTE PROJETO:");
console.log("=".repeat(50));
console.log("üìö INTEGRA√á√ÉO: Todos os conceitos trabalhando juntos");
console.log("üéØ PR√ÅTICA: Aplica√ß√£o real dos conceitos te√≥ricos");
console.log("üß† L√ìGICA: Desenvolvimento do pensamento algor√≠tmico");
console.log("üîß T√âCNICA: Boas pr√°ticas de programa√ß√£o");
console.log("üíº NEG√ìCIO: Compreens√£o de regras de neg√≥cio reais");
console.log("üöÄ EVOLU√á√ÉO: Base s√≥lida para projetos mais complexos");

console.log("\n" + "=".repeat(70));
console.log("üèÜ PARAB√âNS! VOC√ä DOMINOU OS FUNDAMENTOS DO JAVASCRIPT!");
console.log("=".repeat(70));
